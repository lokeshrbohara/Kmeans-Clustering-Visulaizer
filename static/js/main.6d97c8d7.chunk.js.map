{"version":3,"sources":["pages/Kmeans/KmeansAlgo.js","pages/Kmeans/Kmeans.jsx","App.js","reportWebVitals.js","index.js"],"names":["Upload","xarray","yarray","fileUpload","document","getElementById","noclusters","value","noiter","parseInt","console","log","test","toLowerCase","FileReader","reader","onload","e","result","alert","b","split","forEach","element","push","first_row","shift","pop","q","c","i","length","isNaN","maxele","Array","fill","j","w","Math","floor","sum","t","maxx","max","maxy","normalize","elt","h","numClusters","maxIter","callback","iter","centroids","points","margin","top","right","bottom","left","width","height","colors","d3","category20","range","svg","append","style","group","attr","getEuclidianDistance","a","dx","x","dy","y","sqrt","pow","getPoints","type","color","point","round","idx","id","getCentroids","num","random","findClosestCentroid","closest","distance","d","colorizePoints","computeClusterCenter","cluster","moveCentroids","center","filter","update","property","data","concat","circle","selectAll","enter","transition","delay","duration","exit","remove","reduce","acc","obj","key","setText","text","iterate","initialize","grouped","interval","setInterval","clearInterval","kMeans","clusters","Object","entries","undefined","tables","innerHTML","assignClusters","readAsText","files","KmeansComp","className","display","placeholder","size","borderColor","onClick","Header","Layout","Content","App","minHeight","padding","fontSize","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6d97c8d7.chunk.js","sourcesContent":["import * as d3 from 'd3';\r\n\r\n\r\nfunction groupBy(objectArray, property) {\r\n    return objectArray.reduce((acc, obj) => {\r\n\r\n    const key = obj[property];\r\n    if (!acc[key]) {\r\n        acc[key] = [];\r\n    }\r\n    // Add object to list for given key's value\r\n    acc[key].push(obj);\r\n    return acc;\r\n    }, {});\r\n}\r\n\r\nfunction assignClusters(clusters, b, first_row){\r\n    var c = {};\r\n    Object.entries(clusters).forEach(\r\n        ([key, value]) => {\r\n            // console.log(key, value);\r\n            for(var i=0; i<value.length; i++)\r\n            {\r\n                if (!c[key]) {\r\n                    c[key] = [];\r\n                }\r\n                if(b[value[i]['idx']]!==undefined)\r\n                    c[key].push(b[value[i]['idx']]);\r\n\r\n            }\r\n        }\r\n    );\r\n    console.log(c);\r\n    var tables=\"\";\r\n    Object.entries(c).forEach(\r\n        ([key, value]) => {\r\n            tables+=\"<table border='1|1' style='margin:50px;' bgcolor=\"+key+\">\";\r\n            tables+=\"<tr>\";\r\n            for(var i=0; i<first_row.length; i++)\r\n            {\r\n            tables+=\"<th>\"+first_row[i]+\"</th>\";\r\n            }\r\n            tables+=\"</tr>\";\r\n            // console.log(key, value);\r\n            for(var i=0; i<value.length; i++)\r\n            {\r\n                tables+=\"<tr>\";\r\n                for(var j=0; j<value[i].length; j++)\r\n                {\r\n                    tables+=\"<td>\"+value[i][j]+\"</td>\";\r\n                }\r\n                tables+=\"</tr>\";\r\n            }\r\n            tables+=\"</table>\";\r\n        }\r\n    );\r\n    document.getElementById(\"box\").innerHTML = tables;\r\n\r\n\r\n}\r\n\r\nfunction normalize(b, q, c){\r\n    var maxele = new Array(c).fill(-1);\r\n    for(var i=0; i<b.length; i++)\r\n    {\r\n        for(var j=0; j<q.length; j++)\r\n        {\r\n            if(parseInt(b[i][q[j]])>maxele[j]){\r\n                maxele[j] = parseInt(b[i][q[j]]);\r\n            }\r\n        }\r\n\r\n    }\r\n    // q = shuffleArray(q);\r\n    var w = Math.floor(c/2);\r\n    console.log(w);\r\n    var xarray = [];\r\n    var yarray = [];\r\n    var sum=0;\r\n    for(var i=0; i<b.length; i++)\r\n    {\r\n        for(var j=0; j<w; j++)\r\n        { \r\n            if(b[i][q[j]]!==\"0\")\r\n            {\r\n            sum+=parseInt(b[i][q[j]])/maxele[j];\r\n            }\r\n        }\r\n        xarray.push(sum);\r\n        sum = 0;\r\n\r\n        for(var t=w; t<(c-1); t++)\r\n        {\r\n            if(b[i][q[t]]!==\"0\")\r\n            {\r\n            sum+=parseInt(b[i][q[t]])/maxele[t];\r\n            }\r\n        }\r\n        yarray.push(sum);\r\n        sum = 0;\r\n    }\r\n    \r\n    \r\n\r\n    var maxx = Math.max( ...xarray ), maxy = Math.max( ...yarray );\r\n    console.log(maxx, maxy);\r\n    for(var i=0; i<b.length; i++)\r\n    {\r\n        xarray[i] = xarray[i]/maxx;\r\n        yarray[i] = yarray[i]/maxy;\r\n    }\r\n    // console.log(xarray);\r\n    // console.log(yarray);\r\n\r\n    return [xarray, yarray];\r\n}\r\n\r\n\r\n\r\n\r\nexport function Upload() {\r\n    var xarray = [], yarray = [];\r\n    var fileUpload = document.getElementById(\"fileUpload\");\r\n    var noclusters = document.getElementById(\"noclusters\").value;\r\n    var noiter = document.getElementById(\"noiter\").value;\r\n    noclusters = parseInt(noclusters);\r\n    noiter = parseInt(noiter);\r\n    console.log(noclusters, noiter);\r\n    var regex = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.csv|.txt)$/;\r\n    if (regex.test(fileUpload.value.toLowerCase())) {\r\n        if (typeof (FileReader) != \"undefined\") {\r\n        \r\n            var reader = new FileReader();\r\n            reader.onload = function (e) {\r\n            \r\n                console.log(reader.result);\r\n\r\n                alert(reader.result);\r\n                var b = [];\r\n                var a = reader.result.split('\\n');\r\n                a.forEach(element => {\r\n                    b.push(element.split(','));\r\n                });\r\n                var first_row = b.shift();\r\n                b.pop();\r\n                console.log(b);\r\n                var q=[];\r\n                var c=0;\r\n\r\n                for(var i=0; i<b[0].length; i++)\r\n                {\r\n\r\n                    if(!isNaN(b[0][i]))\r\n                    {\r\n                        c+=1;\r\n                        q.push(i);\r\n                    }\r\n\r\n                }\r\n                console.log(c, q);\r\n                \r\n                [xarray, yarray] = normalize(b,q,c);\r\n                console.log(xarray, yarray);\r\n                kMeans(\"#kmeans\", 700, 700, noclusters, noiter, xarray, yarray, function(x){\r\n                    assignClusters(x, b, first_row);\r\n                });\r\n            //  document.getElementsByTagName(\"svg\").style.border = \"thin dotted red\";\r\n                // console.log(reader.result.split('\\n'));\r\n                // console.log(reader.result);\r\n                // console.log(clusters);\r\n                // const newClusters = assignClusters(clusters, b);\r\n\r\n\r\n            }\r\n            reader.readAsText(fileUpload.files[0]);\r\n        } else {\r\n            alert(\"This browser does not support HTML5.\");\r\n        }\r\n    } else {\r\n        alert(\"Please upload a valid CSV file.\");\r\n    }\r\n    return (xarray, yarray);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction kMeans(elt, w, h, numClusters, maxIter, xarray, yarray, callback) {\r\n\r\n\r\n    // the current iteration\r\n    var iter = 1,\r\n        centroids = [],\r\n        points = [];\r\n        \r\n    var margin = {top: 30, right: 20, bottom: 20, left: 30},\r\n        width = w - margin.left - margin.right,\r\n        height = h - margin.top - margin.bottom;\r\n\r\n    var colors = d3.scale.category20().range();\r\n    \r\n    var svg = d3.select(elt).append(\"svg\")\r\n        .style(\"width\", width + margin.left + margin.right)\r\n        .style(\"height\", height + margin.top + margin.bottom);\r\n        // .style(\"margin\", \"-200px 0 100px\")\r\n        \r\n    var group = svg.append(\"g\")\r\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n    \r\n    svg.append(\"g\")\r\n        .append(\"text\")\r\n        .attr(\"class\", \"label\")\r\n        .attr(\"transform\", \"translate(\" + (width - margin.left - margin.right) + \r\n            \",\" + (height + margin.top + margin.bottom) + \")\")\r\n        .text(\"\");\r\n\r\n    /**\r\n     * Computes the euclidian distance between two points.\r\n     */\r\n    function getEuclidianDistance(a, b) {\r\n        var dx = b.x - a.x,\r\n            dy = b.y - a.y;\r\n        return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n    }\r\n    \r\n    /**\r\n     * Returns a point with the specified type and fill color and with random \r\n     * x,y-coordinates.\r\n     */\r\n    function getRandomPoint(type, fill) {\r\n\r\n        return { \r\n            x: Math.round(Math.random() * width), \r\n            y: Math.round(Math.random() * height),\r\n            type: type,\r\n            fill: fill \r\n        };\r\n    }\r\n\r\n    /** \r\n     * Generates a specified number of random points of the specified type.\r\n     */\r\n    function initializePoints(num, type) {\r\n        var result = [];\r\n        for (var i = 0; i < num; i++) {\r\n            var color = colors[i];\r\n            if (type !== \"centroid\") {\r\n                color = \"#ccc\";\r\n            }\r\n            var point = getRandomPoint(type, color);\r\n            point.id = point.type + \"-\" + i;\r\n            result.push(point);\r\n        }\r\n        console.log(type);\r\n        console.log(result);\r\n        return result;\r\n    }\r\n\r\n    function getPoints(type) {\r\n        var result = [];\r\n        for(var i=0; i<xarray.length; i++)\r\n        {\r\n            var color = \"#ccc\";\r\n            var point = { \r\n                x: Math.round(xarray[i] * width), \r\n                y: Math.round(yarray[i] * height),\r\n                type: type,\r\n                fill: color,\r\n                idx: i \r\n            };\r\n            point.id = point.type + \"-\" + i;\r\n            result.push(point);\r\n            // const xrandom = array[Math.floor(Math.random() * array.length)];\r\n        }\r\n        console.log(result);\r\n        return result;\r\n    }\r\n\r\n\r\n    function getCentroids(num, type) {\r\n        var result = [];\r\n        for(var i=0; i<num; i++)\r\n        {\r\n            var color = colors[i];\r\n            var point = { \r\n                x: Math.round(xarray[Math.floor(Math.random() * xarray.length)] * width), \r\n                y: Math.round(yarray[Math.floor(Math.random() * yarray.length)] * height),\r\n                type: type,\r\n                fill: color \r\n            };\r\n            point.id = point.type + \"-\" + i;\r\n            result.push(point);\r\n            // const xrandom = array[Math.floor(Math.random() * array.length)];\r\n        }\r\n        console.log(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Find the centroid that is closest to the specified point.\r\n     */\r\n    function findClosestCentroid(point) {\r\n        var closest = {i: -1, distance: width * 2};\r\n        centroids.forEach(function(d, i) {\r\n            var distance = getEuclidianDistance(d, point);\r\n            // Only update when the centroid is closer\r\n            if (distance < closest.distance) {\r\n                closest.i = i;\r\n                closest.distance = distance;\r\n            }\r\n        });\r\n        return (centroids[closest.i]); \r\n    }\r\n    \r\n    /**\r\n     * All points assume the color of the closest centroid.\r\n     */\r\n    function colorizePoints() {\r\n        points.forEach(function(d) {\r\n            var closest = findClosestCentroid(d);\r\n            d.fill = closest.fill;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Computes the center of the cluster by taking the mean of the x and y \r\n     * coordinates.\r\n     */\r\n    function computeClusterCenter(cluster) {\r\n        return [\r\n            d3.mean(cluster, function(d) { return d.x; }), \r\n            d3.mean(cluster, function(d) { return d.y; })\r\n        ];\r\n    }\r\n    \r\n    /**\r\n     * Moves the centroids to the center of their cluster.\r\n     */\r\n    function moveCentroids() {\r\n        centroids.forEach(function(d) {\r\n            // Get clusters based on their fill color\r\n            var cluster = points.filter(function(e) {\r\n                return e.fill === d.fill;\r\n            });\r\n            // Compute the cluster centers\r\n            var center = computeClusterCenter(cluster);\r\n            // Move the centroid\r\n            d.x = center[0];\r\n            d.y = center[1];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the chart.\r\n     */\r\n    function update() {\r\n    \r\n        var data = points.concat(centroids);\r\n        \r\n        // The data join\r\n        var circle = group.selectAll(\"circle\")\r\n            .data(data);\r\n            \r\n        // Create new elements as needed\r\n        circle.enter().append(\"circle\")\r\n            .attr(\"id\", function(d) { return d.id; })\r\n            .attr(\"class\", function(d) { return d.type; })\r\n            .attr(\"r\", 5);\r\n            \r\n        // Update old elements as needed\r\n        circle.transition().delay(100).duration(1000)\r\n            .attr(\"cx\", function(d) { return d.x; })\r\n            .attr(\"cy\", function(d) { return d.y; })\r\n            .style(\"fill\", function(d) { return d.fill; });\r\n        \r\n        // Remove old nodes\r\n        circle.exit().remove();\r\n        // console.log(\"herreeeeeeeeeeeeeeee\");\r\n        // console.log(data.groupBy);\r\n\r\n        const grouped = groupBy(data, 'fill');\r\n        // console.log(grouped);\r\n        return grouped;\r\n    }\r\n\r\n    /**\r\n     * Updates the text in the label.\r\n     */\r\n    function setText(text) {\r\n        svg.selectAll(\".label\").text(text);\r\n    }\r\n    \r\n    /**\r\n     * Executes one iteration of the algorithm:\r\n     * - Fill the points with the color of the closest centroid (this makes it \r\n     *   part of its cluster)\r\n     * - Move the centroids to the center of their cluster.\r\n     */\r\n    function iterate() {\r\n        \r\n        // Update label\r\n        setText(\"Iteration \" + iter + \" of \" + maxIter);\r\n\r\n        // Colorize the points\r\n        colorizePoints();\r\n        \r\n        // Move the centroids\r\n        moveCentroids();\r\n        \r\n        // Update the chart\r\n        var grouped = update();\r\n        return grouped;\r\n    }\r\n\r\n    /** \r\n     * The main function initializes the algorithm and calls an iteration every \r\n     * two seconds.\r\n     */\r\n    function initialize() {\r\n        var grouped = {};\r\n        // Initialize random points and centroids\r\n        centroids = getCentroids(numClusters, \"centroid\");\r\n        points = getPoints(\"point\");\r\n        \r\n        // initial drawing\r\n        grouped = update();\r\n        \r\n        var interval = setInterval(function() {\r\n            if(iter < maxIter + 1) {\r\n                grouped = iterate();\r\n                iter++;\r\n            } else {\r\n                clearInterval(interval);\r\n                setText(\"Done\");\r\n                callback(grouped);\r\n                \r\n            }\r\n        }, 2 * 1000);\r\n        \r\n\r\n    }\r\n\r\n    \r\n    initialize();\r\n}","import React, { Fragment, useState } from \"react\";\r\nimport { Upload } from \"./KmeansAlgo.js\";\r\nimport { Input } from 'antd';\r\nimport \"./Kmeans.css\";\r\nimport { Button } from 'antd';\r\n\r\nconst KmeansComp = () => {\r\n   \r\n    return (\r\n    <Fragment>\r\n        <div className=\"ho-main\">\r\n            <div style={{display: \"inline-grid\"}}>\r\n                <input style={{margin:'5px'}} type=\"file\" id=\"fileUpload\" />\r\n                <Input style={{margin:'5px', width:'auto'}} placeholder=\"Number of Clusters\" id=\"noclusters\"/>\r\n                <Input style={{margin:'5px', width:'auto'}} placeholder=\"Number of Iterations\" id=\"noiter\"/>\r\n\r\n\r\n            <Button id=\"upload\" size=\"large\" \r\n                style={{color:\"black\", borderColor:\"black\", margin: '5px'}} \r\n                onClick={()=>Upload()}>Upload</Button>\r\n            \r\n            </div>\r\n            <div id=\"kmeans\" className=\"kmeans-chart\"></div>\r\n        \r\n            <div id=\"box\" style={{display:\"inline-grid\"}}></div>\r\n        </div>\r\n    </Fragment>\r\n    );\r\n};\r\n\r\nexport default KmeansComp;\r\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Layout } from \"antd\";\n\nimport './App.css';\n//Pages\nimport KmeansComp from \"./pages/Kmeans/Kmeans\";\n\n\nconst { Header, Content } = Layout;\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Layout style={{ minHeight: \"100vh\" }}>\n          \n          <Layout className=\"site-layout\">\n            <Header\n              className=\"site-layout-background\"\n              style={{ padding: 0, fontSize: \"x-large\", fontWeight: \"700\" }}\n            >\n              K-Means Clustering Visualization\n            </Header>\n            <Content\n              className=\"site-layout-background\"\n              style={{\n                margin: \"24px 16px\",\n                minHeight: 280,\n              }}\n            >\n             \n             <KmeansComp/>\n            </Content>\n          </Layout>\n        </Layout>\n      </Router>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}